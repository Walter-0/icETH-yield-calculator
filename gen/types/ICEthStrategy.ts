/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace AaveLeverageStrategyExtension {
  export type ContractSettingsStruct = {
    setToken: string;
    leverageModule: string;
    aaveProtocolDataProvider: string;
    collateralPriceOracle: string;
    borrowPriceOracle: string;
    targetCollateralAToken: string;
    targetBorrowDebtToken: string;
    collateralAsset: string;
    borrowAsset: string;
    collateralDecimalAdjustment: BigNumberish;
    borrowDecimalAdjustment: BigNumberish;
  };

  export type ContractSettingsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    setToken: string;
    leverageModule: string;
    aaveProtocolDataProvider: string;
    collateralPriceOracle: string;
    borrowPriceOracle: string;
    targetCollateralAToken: string;
    targetBorrowDebtToken: string;
    collateralAsset: string;
    borrowAsset: string;
    collateralDecimalAdjustment: BigNumber;
    borrowDecimalAdjustment: BigNumber;
  };

  export type MethodologySettingsStruct = {
    targetLeverageRatio: BigNumberish;
    minLeverageRatio: BigNumberish;
    maxLeverageRatio: BigNumberish;
    recenteringSpeed: BigNumberish;
    rebalanceInterval: BigNumberish;
  };

  export type MethodologySettingsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    targetLeverageRatio: BigNumber;
    minLeverageRatio: BigNumber;
    maxLeverageRatio: BigNumber;
    recenteringSpeed: BigNumber;
    rebalanceInterval: BigNumber;
  };

  export type ExecutionSettingsStruct = {
    unutilizedLeveragePercentage: BigNumberish;
    slippageTolerance: BigNumberish;
    twapCooldownPeriod: BigNumberish;
  };

  export type ExecutionSettingsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    unutilizedLeveragePercentage: BigNumber;
    slippageTolerance: BigNumber;
    twapCooldownPeriod: BigNumber;
  };

  export type IncentiveSettingsStruct = {
    etherReward: BigNumberish;
    incentivizedLeverageRatio: BigNumberish;
    incentivizedSlippageTolerance: BigNumberish;
    incentivizedTwapCooldownPeriod: BigNumberish;
  };

  export type IncentiveSettingsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    etherReward: BigNumber;
    incentivizedLeverageRatio: BigNumber;
    incentivizedSlippageTolerance: BigNumber;
    incentivizedTwapCooldownPeriod: BigNumber;
  };

  export type ExchangeSettingsStruct = {
    twapMaxTradeSize: BigNumberish;
    exchangeLastTradeTimestamp: BigNumberish;
    incentivizedTwapMaxTradeSize: BigNumberish;
    leverExchangeData: BytesLike;
    deleverExchangeData: BytesLike;
  };

  export type ExchangeSettingsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    twapMaxTradeSize: BigNumber;
    exchangeLastTradeTimestamp: BigNumber;
    incentivizedTwapMaxTradeSize: BigNumber;
    leverExchangeData: string;
    deleverExchangeData: string;
  };
}

export interface ICEthStrategyInterface extends utils.Interface {
  functions: {
    "addEnabledExchange(string,(uint256,uint256,uint256,bytes,bytes))": FunctionFragment;
    "anyoneCallable()": FunctionFragment;
    "callAllowList(address)": FunctionFragment;
    "disengage(string)": FunctionFragment;
    "enabledExchanges(uint256)": FunctionFragment;
    "engage(string)": FunctionFragment;
    "getChunkRebalanceNotional(string[])": FunctionFragment;
    "getCurrentEtherIncentive()": FunctionFragment;
    "getCurrentLeverageRatio()": FunctionFragment;
    "getEnabledExchanges()": FunctionFragment;
    "getExchangeSettings(string)": FunctionFragment;
    "getExecution()": FunctionFragment;
    "getIncentive()": FunctionFragment;
    "getMethodology()": FunctionFragment;
    "getStrategy()": FunctionFragment;
    "globalLastTradeTimestamp()": FunctionFragment;
    "iterateRebalance(string)": FunctionFragment;
    "manager()": FunctionFragment;
    "rebalance(string)": FunctionFragment;
    "removeEnabledExchange(string)": FunctionFragment;
    "ripcord(string)": FunctionFragment;
    "setExecutionSettings((uint256,uint256,uint256))": FunctionFragment;
    "setIncentiveSettings((uint256,uint256,uint256,uint256))": FunctionFragment;
    "setMethodologySettings((uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "shouldRebalance()": FunctionFragment;
    "shouldRebalanceWithBounds(uint256,uint256)": FunctionFragment;
    "twapLeverageRatio()": FunctionFragment;
    "updateAnyoneCallable(bool)": FunctionFragment;
    "updateCallerStatus(address[],bool[])": FunctionFragment;
    "updateEnabledExchange(string,(uint256,uint256,uint256,bytes,bytes))": FunctionFragment;
    "withdrawEtherBalance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addEnabledExchange"
      | "anyoneCallable"
      | "callAllowList"
      | "disengage"
      | "enabledExchanges"
      | "engage"
      | "getChunkRebalanceNotional"
      | "getCurrentEtherIncentive"
      | "getCurrentLeverageRatio"
      | "getEnabledExchanges"
      | "getExchangeSettings"
      | "getExecution"
      | "getIncentive"
      | "getMethodology"
      | "getStrategy"
      | "globalLastTradeTimestamp"
      | "iterateRebalance"
      | "manager"
      | "rebalance"
      | "removeEnabledExchange"
      | "ripcord"
      | "setExecutionSettings"
      | "setIncentiveSettings"
      | "setMethodologySettings"
      | "shouldRebalance"
      | "shouldRebalanceWithBounds"
      | "twapLeverageRatio"
      | "updateAnyoneCallable"
      | "updateCallerStatus"
      | "updateEnabledExchange"
      | "withdrawEtherBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEnabledExchange",
    values: [string, AaveLeverageStrategyExtension.ExchangeSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "anyoneCallable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callAllowList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "disengage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "enabledExchanges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "engage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getChunkRebalanceNotional",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEtherIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLeverageRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnabledExchanges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeSettings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMethodology",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalLastTradeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "iterateRebalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "rebalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeEnabledExchange",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "ripcord", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setExecutionSettings",
    values: [AaveLeverageStrategyExtension.ExecutionSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentiveSettings",
    values: [AaveLeverageStrategyExtension.IncentiveSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMethodologySettings",
    values: [AaveLeverageStrategyExtension.MethodologySettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldRebalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shouldRebalanceWithBounds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "twapLeverageRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAnyoneCallable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCallerStatus",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEnabledExchange",
    values: [string, AaveLeverageStrategyExtension.ExchangeSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEtherBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addEnabledExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anyoneCallable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disengage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enabledExchanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "engage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChunkRebalanceNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEtherIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLeverageRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnabledExchanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMethodology",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalLastTradeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iterateRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEnabledExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ripcord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentiveSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMethodologySettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldRebalanceWithBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twapLeverageRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAnyoneCallable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCallerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEnabledExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEtherBalance",
    data: BytesLike
  ): Result;

  events: {
    "AnyoneCallableUpdated(bool)": EventFragment;
    "CallerStatusUpdated(address,bool)": EventFragment;
    "Disengaged(uint256,uint256,uint256,uint256)": EventFragment;
    "Engaged(uint256,uint256,uint256,uint256)": EventFragment;
    "ExchangeAdded(string,uint256,uint256,uint256,bytes,bytes)": EventFragment;
    "ExchangeRemoved(string)": EventFragment;
    "ExchangeUpdated(string,uint256,uint256,uint256,bytes,bytes)": EventFragment;
    "ExecutionSettingsUpdated(uint256,uint256,uint256)": EventFragment;
    "IncentiveSettingsUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "MethodologySettingsUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "RebalanceIterated(uint256,uint256,uint256,uint256)": EventFragment;
    "Rebalanced(uint256,uint256,uint256,uint256)": EventFragment;
    "RipcordCalled(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnyoneCallableUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallerStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Disengaged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Engaged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionSettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveSettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MethodologySettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceIterated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebalanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RipcordCalled"): EventFragment;
}

export interface AnyoneCallableUpdatedEventObject {
  _status: boolean;
}
export type AnyoneCallableUpdatedEvent = TypedEvent<
  [boolean],
  AnyoneCallableUpdatedEventObject
>;

export type AnyoneCallableUpdatedEventFilter =
  TypedEventFilter<AnyoneCallableUpdatedEvent>;

export interface CallerStatusUpdatedEventObject {
  _caller: string;
  _status: boolean;
}
export type CallerStatusUpdatedEvent = TypedEvent<
  [string, boolean],
  CallerStatusUpdatedEventObject
>;

export type CallerStatusUpdatedEventFilter =
  TypedEventFilter<CallerStatusUpdatedEvent>;

export interface DisengagedEventObject {
  _currentLeverageRatio: BigNumber;
  _newLeverageRatio: BigNumber;
  _chunkRebalanceNotional: BigNumber;
  _totalRebalanceNotional: BigNumber;
}
export type DisengagedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  DisengagedEventObject
>;

export type DisengagedEventFilter = TypedEventFilter<DisengagedEvent>;

export interface EngagedEventObject {
  _currentLeverageRatio: BigNumber;
  _newLeverageRatio: BigNumber;
  _chunkRebalanceNotional: BigNumber;
  _totalRebalanceNotional: BigNumber;
}
export type EngagedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  EngagedEventObject
>;

export type EngagedEventFilter = TypedEventFilter<EngagedEvent>;

export interface ExchangeAddedEventObject {
  _exchangeName: string;
  twapMaxTradeSize: BigNumber;
  exchangeLastTradeTimestamp: BigNumber;
  incentivizedTwapMaxTradeSize: BigNumber;
  leverExchangeData: string;
  deleverExchangeData: string;
}
export type ExchangeAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, string],
  ExchangeAddedEventObject
>;

export type ExchangeAddedEventFilter = TypedEventFilter<ExchangeAddedEvent>;

export interface ExchangeRemovedEventObject {
  _exchangeName: string;
}
export type ExchangeRemovedEvent = TypedEvent<
  [string],
  ExchangeRemovedEventObject
>;

export type ExchangeRemovedEventFilter = TypedEventFilter<ExchangeRemovedEvent>;

export interface ExchangeUpdatedEventObject {
  _exchangeName: string;
  twapMaxTradeSize: BigNumber;
  exchangeLastTradeTimestamp: BigNumber;
  incentivizedTwapMaxTradeSize: BigNumber;
  leverExchangeData: string;
  deleverExchangeData: string;
}
export type ExchangeUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, string],
  ExchangeUpdatedEventObject
>;

export type ExchangeUpdatedEventFilter = TypedEventFilter<ExchangeUpdatedEvent>;

export interface ExecutionSettingsUpdatedEventObject {
  _unutilizedLeveragePercentage: BigNumber;
  _twapCooldownPeriod: BigNumber;
  _slippageTolerance: BigNumber;
}
export type ExecutionSettingsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ExecutionSettingsUpdatedEventObject
>;

export type ExecutionSettingsUpdatedEventFilter =
  TypedEventFilter<ExecutionSettingsUpdatedEvent>;

export interface IncentiveSettingsUpdatedEventObject {
  _etherReward: BigNumber;
  _incentivizedLeverageRatio: BigNumber;
  _incentivizedSlippageTolerance: BigNumber;
  _incentivizedTwapCooldownPeriod: BigNumber;
}
export type IncentiveSettingsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  IncentiveSettingsUpdatedEventObject
>;

export type IncentiveSettingsUpdatedEventFilter =
  TypedEventFilter<IncentiveSettingsUpdatedEvent>;

export interface MethodologySettingsUpdatedEventObject {
  _targetLeverageRatio: BigNumber;
  _minLeverageRatio: BigNumber;
  _maxLeverageRatio: BigNumber;
  _recenteringSpeed: BigNumber;
  _rebalanceInterval: BigNumber;
}
export type MethodologySettingsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MethodologySettingsUpdatedEventObject
>;

export type MethodologySettingsUpdatedEventFilter =
  TypedEventFilter<MethodologySettingsUpdatedEvent>;

export interface RebalanceIteratedEventObject {
  _currentLeverageRatio: BigNumber;
  _newLeverageRatio: BigNumber;
  _chunkRebalanceNotional: BigNumber;
  _totalRebalanceNotional: BigNumber;
}
export type RebalanceIteratedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  RebalanceIteratedEventObject
>;

export type RebalanceIteratedEventFilter =
  TypedEventFilter<RebalanceIteratedEvent>;

export interface RebalancedEventObject {
  _currentLeverageRatio: BigNumber;
  _newLeverageRatio: BigNumber;
  _chunkRebalanceNotional: BigNumber;
  _totalRebalanceNotional: BigNumber;
}
export type RebalancedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  RebalancedEventObject
>;

export type RebalancedEventFilter = TypedEventFilter<RebalancedEvent>;

export interface RipcordCalledEventObject {
  _currentLeverageRatio: BigNumber;
  _newLeverageRatio: BigNumber;
  _rebalanceNotional: BigNumber;
  _etherIncentive: BigNumber;
}
export type RipcordCalledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  RipcordCalledEventObject
>;

export type RipcordCalledEventFilter = TypedEventFilter<RipcordCalledEvent>;

export interface ICEthStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICEthStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addEnabledExchange(
      _exchangeName: string,
      _exchangeSettings: AaveLeverageStrategyExtension.ExchangeSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anyoneCallable(overrides?: CallOverrides): Promise<[boolean]>;

    callAllowList(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    disengage(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enabledExchanges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    engage(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChunkRebalanceNotional(
      _exchangeNames: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string, string] & {
        sizes: BigNumber[];
        sellAsset: string;
        buyAsset: string;
      }
    >;

    getCurrentEtherIncentive(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentLeverageRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEnabledExchanges(overrides?: CallOverrides): Promise<[string[]]>;

    getExchangeSettings(
      _exchangeName: string,
      overrides?: CallOverrides
    ): Promise<[AaveLeverageStrategyExtension.ExchangeSettingsStructOutput]>;

    getExecution(
      overrides?: CallOverrides
    ): Promise<[AaveLeverageStrategyExtension.ExecutionSettingsStructOutput]>;

    getIncentive(
      overrides?: CallOverrides
    ): Promise<[AaveLeverageStrategyExtension.IncentiveSettingsStructOutput]>;

    getMethodology(
      overrides?: CallOverrides
    ): Promise<[AaveLeverageStrategyExtension.MethodologySettingsStructOutput]>;

    getStrategy(
      overrides?: CallOverrides
    ): Promise<[AaveLeverageStrategyExtension.ContractSettingsStructOutput]>;

    globalLastTradeTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    iterateRebalance(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    rebalance(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeEnabledExchange(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ripcord(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExecutionSettings(
      _newExecutionSettings: AaveLeverageStrategyExtension.ExecutionSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIncentiveSettings(
      _newIncentiveSettings: AaveLeverageStrategyExtension.IncentiveSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMethodologySettings(
      _newMethodologySettings: AaveLeverageStrategyExtension.MethodologySettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shouldRebalance(overrides?: CallOverrides): Promise<[string[], number[]]>;

    shouldRebalanceWithBounds(
      _customMinLeverageRatio: BigNumberish,
      _customMaxLeverageRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], number[]]>;

    twapLeverageRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateAnyoneCallable(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCallerStatus(
      _callers: string[],
      _statuses: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEnabledExchange(
      _exchangeName: string,
      _exchangeSettings: AaveLeverageStrategyExtension.ExchangeSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEtherBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addEnabledExchange(
    _exchangeName: string,
    _exchangeSettings: AaveLeverageStrategyExtension.ExchangeSettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anyoneCallable(overrides?: CallOverrides): Promise<boolean>;

  callAllowList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  disengage(
    _exchangeName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enabledExchanges(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  engage(
    _exchangeName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChunkRebalanceNotional(
    _exchangeNames: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], string, string] & {
      sizes: BigNumber[];
      sellAsset: string;
      buyAsset: string;
    }
  >;

  getCurrentEtherIncentive(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentLeverageRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getEnabledExchanges(overrides?: CallOverrides): Promise<string[]>;

  getExchangeSettings(
    _exchangeName: string,
    overrides?: CallOverrides
  ): Promise<AaveLeverageStrategyExtension.ExchangeSettingsStructOutput>;

  getExecution(
    overrides?: CallOverrides
  ): Promise<AaveLeverageStrategyExtension.ExecutionSettingsStructOutput>;

  getIncentive(
    overrides?: CallOverrides
  ): Promise<AaveLeverageStrategyExtension.IncentiveSettingsStructOutput>;

  getMethodology(
    overrides?: CallOverrides
  ): Promise<AaveLeverageStrategyExtension.MethodologySettingsStructOutput>;

  getStrategy(
    overrides?: CallOverrides
  ): Promise<AaveLeverageStrategyExtension.ContractSettingsStructOutput>;

  globalLastTradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  iterateRebalance(
    _exchangeName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  rebalance(
    _exchangeName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeEnabledExchange(
    _exchangeName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ripcord(
    _exchangeName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExecutionSettings(
    _newExecutionSettings: AaveLeverageStrategyExtension.ExecutionSettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIncentiveSettings(
    _newIncentiveSettings: AaveLeverageStrategyExtension.IncentiveSettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMethodologySettings(
    _newMethodologySettings: AaveLeverageStrategyExtension.MethodologySettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shouldRebalance(overrides?: CallOverrides): Promise<[string[], number[]]>;

  shouldRebalanceWithBounds(
    _customMinLeverageRatio: BigNumberish,
    _customMaxLeverageRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], number[]]>;

  twapLeverageRatio(overrides?: CallOverrides): Promise<BigNumber>;

  updateAnyoneCallable(
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCallerStatus(
    _callers: string[],
    _statuses: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEnabledExchange(
    _exchangeName: string,
    _exchangeSettings: AaveLeverageStrategyExtension.ExchangeSettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEtherBalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addEnabledExchange(
      _exchangeName: string,
      _exchangeSettings: AaveLeverageStrategyExtension.ExchangeSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    anyoneCallable(overrides?: CallOverrides): Promise<boolean>;

    callAllowList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    disengage(_exchangeName: string, overrides?: CallOverrides): Promise<void>;

    enabledExchanges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    engage(_exchangeName: string, overrides?: CallOverrides): Promise<void>;

    getChunkRebalanceNotional(
      _exchangeNames: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string, string] & {
        sizes: BigNumber[];
        sellAsset: string;
        buyAsset: string;
      }
    >;

    getCurrentEtherIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentLeverageRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getEnabledExchanges(overrides?: CallOverrides): Promise<string[]>;

    getExchangeSettings(
      _exchangeName: string,
      overrides?: CallOverrides
    ): Promise<AaveLeverageStrategyExtension.ExchangeSettingsStructOutput>;

    getExecution(
      overrides?: CallOverrides
    ): Promise<AaveLeverageStrategyExtension.ExecutionSettingsStructOutput>;

    getIncentive(
      overrides?: CallOverrides
    ): Promise<AaveLeverageStrategyExtension.IncentiveSettingsStructOutput>;

    getMethodology(
      overrides?: CallOverrides
    ): Promise<AaveLeverageStrategyExtension.MethodologySettingsStructOutput>;

    getStrategy(
      overrides?: CallOverrides
    ): Promise<AaveLeverageStrategyExtension.ContractSettingsStructOutput>;

    globalLastTradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    iterateRebalance(
      _exchangeName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    manager(overrides?: CallOverrides): Promise<string>;

    rebalance(_exchangeName: string, overrides?: CallOverrides): Promise<void>;

    removeEnabledExchange(
      _exchangeName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ripcord(_exchangeName: string, overrides?: CallOverrides): Promise<void>;

    setExecutionSettings(
      _newExecutionSettings: AaveLeverageStrategyExtension.ExecutionSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setIncentiveSettings(
      _newIncentiveSettings: AaveLeverageStrategyExtension.IncentiveSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setMethodologySettings(
      _newMethodologySettings: AaveLeverageStrategyExtension.MethodologySettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldRebalance(overrides?: CallOverrides): Promise<[string[], number[]]>;

    shouldRebalanceWithBounds(
      _customMinLeverageRatio: BigNumberish,
      _customMaxLeverageRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], number[]]>;

    twapLeverageRatio(overrides?: CallOverrides): Promise<BigNumber>;

    updateAnyoneCallable(
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCallerStatus(
      _callers: string[],
      _statuses: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateEnabledExchange(
      _exchangeName: string,
      _exchangeSettings: AaveLeverageStrategyExtension.ExchangeSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEtherBalance(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AnyoneCallableUpdated(bool)"(
      _status?: boolean | null
    ): AnyoneCallableUpdatedEventFilter;
    AnyoneCallableUpdated(
      _status?: boolean | null
    ): AnyoneCallableUpdatedEventFilter;

    "CallerStatusUpdated(address,bool)"(
      _caller?: string | null,
      _status?: null
    ): CallerStatusUpdatedEventFilter;
    CallerStatusUpdated(
      _caller?: string | null,
      _status?: null
    ): CallerStatusUpdatedEventFilter;

    "Disengaged(uint256,uint256,uint256,uint256)"(
      _currentLeverageRatio?: null,
      _newLeverageRatio?: null,
      _chunkRebalanceNotional?: null,
      _totalRebalanceNotional?: null
    ): DisengagedEventFilter;
    Disengaged(
      _currentLeverageRatio?: null,
      _newLeverageRatio?: null,
      _chunkRebalanceNotional?: null,
      _totalRebalanceNotional?: null
    ): DisengagedEventFilter;

    "Engaged(uint256,uint256,uint256,uint256)"(
      _currentLeverageRatio?: null,
      _newLeverageRatio?: null,
      _chunkRebalanceNotional?: null,
      _totalRebalanceNotional?: null
    ): EngagedEventFilter;
    Engaged(
      _currentLeverageRatio?: null,
      _newLeverageRatio?: null,
      _chunkRebalanceNotional?: null,
      _totalRebalanceNotional?: null
    ): EngagedEventFilter;

    "ExchangeAdded(string,uint256,uint256,uint256,bytes,bytes)"(
      _exchangeName?: null,
      twapMaxTradeSize?: null,
      exchangeLastTradeTimestamp?: null,
      incentivizedTwapMaxTradeSize?: null,
      leverExchangeData?: null,
      deleverExchangeData?: null
    ): ExchangeAddedEventFilter;
    ExchangeAdded(
      _exchangeName?: null,
      twapMaxTradeSize?: null,
      exchangeLastTradeTimestamp?: null,
      incentivizedTwapMaxTradeSize?: null,
      leverExchangeData?: null,
      deleverExchangeData?: null
    ): ExchangeAddedEventFilter;

    "ExchangeRemoved(string)"(_exchangeName?: null): ExchangeRemovedEventFilter;
    ExchangeRemoved(_exchangeName?: null): ExchangeRemovedEventFilter;

    "ExchangeUpdated(string,uint256,uint256,uint256,bytes,bytes)"(
      _exchangeName?: null,
      twapMaxTradeSize?: null,
      exchangeLastTradeTimestamp?: null,
      incentivizedTwapMaxTradeSize?: null,
      leverExchangeData?: null,
      deleverExchangeData?: null
    ): ExchangeUpdatedEventFilter;
    ExchangeUpdated(
      _exchangeName?: null,
      twapMaxTradeSize?: null,
      exchangeLastTradeTimestamp?: null,
      incentivizedTwapMaxTradeSize?: null,
      leverExchangeData?: null,
      deleverExchangeData?: null
    ): ExchangeUpdatedEventFilter;

    "ExecutionSettingsUpdated(uint256,uint256,uint256)"(
      _unutilizedLeveragePercentage?: null,
      _twapCooldownPeriod?: null,
      _slippageTolerance?: null
    ): ExecutionSettingsUpdatedEventFilter;
    ExecutionSettingsUpdated(
      _unutilizedLeveragePercentage?: null,
      _twapCooldownPeriod?: null,
      _slippageTolerance?: null
    ): ExecutionSettingsUpdatedEventFilter;

    "IncentiveSettingsUpdated(uint256,uint256,uint256,uint256)"(
      _etherReward?: null,
      _incentivizedLeverageRatio?: null,
      _incentivizedSlippageTolerance?: null,
      _incentivizedTwapCooldownPeriod?: null
    ): IncentiveSettingsUpdatedEventFilter;
    IncentiveSettingsUpdated(
      _etherReward?: null,
      _incentivizedLeverageRatio?: null,
      _incentivizedSlippageTolerance?: null,
      _incentivizedTwapCooldownPeriod?: null
    ): IncentiveSettingsUpdatedEventFilter;

    "MethodologySettingsUpdated(uint256,uint256,uint256,uint256,uint256)"(
      _targetLeverageRatio?: null,
      _minLeverageRatio?: null,
      _maxLeverageRatio?: null,
      _recenteringSpeed?: null,
      _rebalanceInterval?: null
    ): MethodologySettingsUpdatedEventFilter;
    MethodologySettingsUpdated(
      _targetLeverageRatio?: null,
      _minLeverageRatio?: null,
      _maxLeverageRatio?: null,
      _recenteringSpeed?: null,
      _rebalanceInterval?: null
    ): MethodologySettingsUpdatedEventFilter;

    "RebalanceIterated(uint256,uint256,uint256,uint256)"(
      _currentLeverageRatio?: null,
      _newLeverageRatio?: null,
      _chunkRebalanceNotional?: null,
      _totalRebalanceNotional?: null
    ): RebalanceIteratedEventFilter;
    RebalanceIterated(
      _currentLeverageRatio?: null,
      _newLeverageRatio?: null,
      _chunkRebalanceNotional?: null,
      _totalRebalanceNotional?: null
    ): RebalanceIteratedEventFilter;

    "Rebalanced(uint256,uint256,uint256,uint256)"(
      _currentLeverageRatio?: null,
      _newLeverageRatio?: null,
      _chunkRebalanceNotional?: null,
      _totalRebalanceNotional?: null
    ): RebalancedEventFilter;
    Rebalanced(
      _currentLeverageRatio?: null,
      _newLeverageRatio?: null,
      _chunkRebalanceNotional?: null,
      _totalRebalanceNotional?: null
    ): RebalancedEventFilter;

    "RipcordCalled(uint256,uint256,uint256,uint256)"(
      _currentLeverageRatio?: null,
      _newLeverageRatio?: null,
      _rebalanceNotional?: null,
      _etherIncentive?: null
    ): RipcordCalledEventFilter;
    RipcordCalled(
      _currentLeverageRatio?: null,
      _newLeverageRatio?: null,
      _rebalanceNotional?: null,
      _etherIncentive?: null
    ): RipcordCalledEventFilter;
  };

  estimateGas: {
    addEnabledExchange(
      _exchangeName: string,
      _exchangeSettings: AaveLeverageStrategyExtension.ExchangeSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anyoneCallable(overrides?: CallOverrides): Promise<BigNumber>;

    callAllowList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    disengage(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enabledExchanges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    engage(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChunkRebalanceNotional(
      _exchangeNames: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentEtherIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentLeverageRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getEnabledExchanges(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeSettings(
      _exchangeName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecution(overrides?: CallOverrides): Promise<BigNumber>;

    getIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    getMethodology(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    globalLastTradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    iterateRebalance(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeEnabledExchange(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ripcord(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExecutionSettings(
      _newExecutionSettings: AaveLeverageStrategyExtension.ExecutionSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIncentiveSettings(
      _newIncentiveSettings: AaveLeverageStrategyExtension.IncentiveSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMethodologySettings(
      _newMethodologySettings: AaveLeverageStrategyExtension.MethodologySettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shouldRebalance(overrides?: CallOverrides): Promise<BigNumber>;

    shouldRebalanceWithBounds(
      _customMinLeverageRatio: BigNumberish,
      _customMaxLeverageRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    twapLeverageRatio(overrides?: CallOverrides): Promise<BigNumber>;

    updateAnyoneCallable(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCallerStatus(
      _callers: string[],
      _statuses: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEnabledExchange(
      _exchangeName: string,
      _exchangeSettings: AaveLeverageStrategyExtension.ExchangeSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEtherBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addEnabledExchange(
      _exchangeName: string,
      _exchangeSettings: AaveLeverageStrategyExtension.ExchangeSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anyoneCallable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callAllowList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disengage(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enabledExchanges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    engage(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChunkRebalanceNotional(
      _exchangeNames: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentEtherIncentive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentLeverageRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnabledExchanges(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangeSettings(
      _exchangeName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIncentive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMethodology(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalLastTradeTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    iterateRebalance(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeEnabledExchange(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ripcord(
      _exchangeName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExecutionSettings(
      _newExecutionSettings: AaveLeverageStrategyExtension.ExecutionSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIncentiveSettings(
      _newIncentiveSettings: AaveLeverageStrategyExtension.IncentiveSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMethodologySettings(
      _newMethodologySettings: AaveLeverageStrategyExtension.MethodologySettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shouldRebalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shouldRebalanceWithBounds(
      _customMinLeverageRatio: BigNumberish,
      _customMaxLeverageRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    twapLeverageRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAnyoneCallable(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCallerStatus(
      _callers: string[],
      _statuses: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEnabledExchange(
      _exchangeName: string,
      _exchangeSettings: AaveLeverageStrategyExtension.ExchangeSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEtherBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
